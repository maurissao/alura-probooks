import 'reflect-metadata';
import { ValidatorConstraint, ValidatorConstraintInterface, ValidationArguments, } from 'class-validator';

export const Column = function(propetyType?: any) {
  return function (target: any, propertyKey: string | symbol) {
    const entityColumn = Reflect.getMetadata('EntityColumn', target.constructor) || [];
    entityColumn.push({
      propertyKey,
      propetyType
    });
    Reflect.defineMetadata('EntityColumn', entityColumn, target.constructor);
  }
}

export const CheckFK = function (table: string, key: string) {
  return function (target: any, propertyKey: string | symbol) {
    const cc: any[] = Reflect.getMetadata('CheckConstraintFK', target.constructor) || [];
    cc.push({ columnName: propertyKey, fkTable: table, fkColumnName: key });
    Reflect.defineMetadata('CheckConstraintFK', cc, target.constructor);
  };
};

export const IsAutoGeneratedID = function () {
  return function (target: any, propertyKey: string | symbol) {
    Reflect.defineMetadata('AutoGeneratedID', propertyKey, target.constructor, propertyKey);
  };
};

export const IsUnique = function () {
  return function (target: any, propertyKey: string | symbol) {
    Reflect.defineMetadata('IsUnique', true, target.constructor, propertyKey);
  }
}